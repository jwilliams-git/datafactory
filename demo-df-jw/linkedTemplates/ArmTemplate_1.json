{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "demo-df-jw"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"linkedService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedService1'"
		},
		"local_machine_linked_sevice_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'local_machine_linked_sevice'"
		},
		"Azure_Blob_CSV_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "forUpdate.csv"
		},
		"Azure_Blob_CSV_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "files"
		},
		"Azure_Demo_Blob_Storage_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"Azure_Demo_Blob_Storage_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "files"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "CEI.DOMAIN\\jwilliams"
		},
		"Web1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.w3schools.com/html/tryit.asp?filename=tryhtml_table_intro"
		},
		"linkedService1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "jwilliams@ceiamerica.com"
		},
		"local_machine_linked_sevice_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "jwilliams@ceiamerica.com"
		},
		"Local_File_Share_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@concat('S3_',formatDateTime(utcnow(),'yyyyMMddhhmmss'),'.csv')"
		},
		"Local_File_Share_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "files"
		},
		"Local_File_System_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().fileName"
		},
		"Local_File_System_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": ""
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Azure_Blob_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Demo Blob Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('Azure_Blob_CSV_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Azure_Blob_CSV_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_Demo_Blob_Storage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Demo Blob Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": "[parameters('Azure_Demo_Blob_Storage_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Azure_Demo_Blob_Storage_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Factory_Demo_Data_Set')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureTableStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"typeProperties": {
					"tableName": "music"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Factory_Demo_Data_Set1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureTableStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"typeProperties": {
					"tableName": "music"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Factory_Demo_Data_Set2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureTableStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"typeProperties": {
					"tableName": "automobile"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Yelp_Data_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Category": {
						"type": "string"
					},
					"City": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpFile",
				"structure": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "alias",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "image_url",
						"type": "String"
					},
					{
						"name": "is_closed",
						"type": "Boolean"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "review_count",
						"type": "Int64"
					},
					{
						"name": "categories",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "Double"
					},
					{
						"name": "latitude",
						"type": "Double"
					},
					{
						"name": "longitude",
						"type": "Double"
					},
					{
						"name": "transactions",
						"type": "String"
					},
					{
						"name": "price",
						"type": "String"
					},
					{
						"name": "address1",
						"type": "String"
					},
					{
						"name": "address2",
						"type": "String"
					},
					{
						"name": "address3",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "zip_code",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "display_address",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "display_phone",
						"type": "String"
					},
					{
						"name": "distance",
						"type": "Double"
					}
				],
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "setOfObjects",
						"jsonNodeReference": "$.['businesses']",
						"jsonPathDefinition": {
							"id": "[concat('[', '''id'']')]",
							"alias": "[concat('[', '''alias'']')]",
							"name": "[concat('[', '''name'']')]",
							"image_url": "[concat('[', '''image_url'']')]",
							"is_closed": "[concat('[', '''is_closed'']')]",
							"url": "[concat('[', '''url'']')]",
							"review_count": "[concat('[', '''review_count'']')]",
							"categories": "[concat('[', '''categories'']')]",
							"rating": "[concat('[', '''rating'']')]",
							"latitude": "[concat('[', '''coordinates''][''latitude'']')]",
							"longitude": "[concat('[', '''coordinates''][''longitude'']')]",
							"transactions": "[concat('[', '''transactions'']')]",
							"price": "[concat('[', '''price'']')]",
							"address1": "[concat('[', '''location''][''address1'']')]",
							"address2": "[concat('[', '''location''][''address2'']')]",
							"address3": "[concat('[', '''location''][''address3'']')]",
							"city": "[concat('[', '''location''][''city'']')]",
							"zip_code": "[concat('[', '''location''][''zip_code'']')]",
							"country": "[concat('[', '''location''][''country'']')]",
							"state": "[concat('[', '''location''][''state'']')]",
							"display_address": "[concat('[', '''location''][''display_address'']')]",
							"phone": "[concat('[', '''phone'']')]",
							"display_phone": "[concat('[', '''display_phone'']')]",
							"distance": "[concat('[', '''distance'']')]"
						}
					},
					"relativeUrl": {
						"value": "@concat('?location=',dataset().City,'&radius=40000&sort_by=rating&limit=50&categories=',dataset().Category)",
						"type": "Expression"
					},
					"requestMethod": "GET",
					"additionalHeaders": "Authorization: Bearer Plcw1tCLJR0HOzVRzv6JRJ8jbJMFUXNjt7aA11pXsI-xSw_kcbSSUiJMobsOOrQvlKCqPmlP2DpasIeGptmO7b1IkU3l0ERDD1PY3jsy1z6-AMjuKgxbLslZ0c-8XHYx"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_Yelp_Data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "YelpId",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ReviewCount",
						"type": "Int32"
					},
					{
						"name": "Rating",
						"type": "Decimal"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "SearchLocationCity",
						"type": "String"
					},
					{
						"name": "SearchLocationState",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[YelpRawData]')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_Yelp_Data_DF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "YelpId",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ReviewCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Rating",
						"type": "decimal",
						"precision": 3,
						"scale": 2
					},
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "SearchLocationCity",
						"type": "nvarchar"
					},
					{
						"name": "SearchLocationState",
						"type": "char"
					},
					{
						"name": "Price",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[YelpRawData]')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_Yelp_Data_DF_Aggregate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReviewCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "LocationWithPriceCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State",
						"type": "char"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[YelpAggregateData]')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Web1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Web",
				"typeProperties": {
					"url": "[parameters('Web1_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "C:\\Users\\jwilliams\\Desktop\\presentations\\azure bootcamp 19",
					"userId": "[parameters('linkedService1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/local_machine_linked_sevice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "C:\\Users\\jwilliams\\Desktop\\presentations\\azure bootcamp 19",
					"userId": "[parameters('local_machine_linked_sevice_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('local_machine_linked_sevice_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Automobile Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:1:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "@concat('Timestamp gt ''', formatDateTime(adddays(utcnow(),-30)),'''')",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "Data_Factory_Demo_Data_Set2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy Data To Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": "@concat('Timestamp gt datetime''', formatDateTime(adddays(utcnow(),-30)),'''')",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Data_Factory_Demo_Data_Set2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlob2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Handle Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Data",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy Data To Blob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-34.eastus.logic.azure.com:443/workflows/cc1c41cefcda4773b17ef1565b6366d3/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OpgAMjs3ObbrlTBIIScvQQY2Lk2onl2nzNnGntTgLGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "error copying automobile data"
							}
						}
					}
				],
				"folder": {
					"name": "Activities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Data_Factory_Demo_Data_Set2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Music Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:1:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": "Processed eq false",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "Data_Factory_Demo_Data_Set",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy Data To Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": "Processed eq false",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Data_Factory_Demo_Data_Set",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Activities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Data_Factory_Demo_Data_Set')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Local_File_Share')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "local_machine_linked_sevice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": {
						"value": "[parameters('Local_File_Share_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('Local_File_Share_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/local_machine_linked_sevice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Local_File_System')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "local_machine_linked_sevice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('Local_File_System_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('Local_File_System_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/local_machine_linked_sevice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggregate Yelp Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Raw_Yelp_Data_DF",
								"type": "DatasetReference"
							},
							"name": "RawYelpData",
							"script": "source(output(\n\t\tId as integer,\n\t\tYelpId as string,\n\t\tName as string,\n\t\tReviewCount as integer,\n\t\tRating as decimal(3,2),\n\t\tCategory as string,\n\t\tSearchLocationCity as string,\n\t\tSearchLocationState as string,\n\t\tPrice as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table') ~> RawYelpData",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Raw_Yelp_Data_DF_Aggregate",
								"type": "DatasetReference"
							},
							"name": "SinkToSQL",
							"script": "AggregateReviewCountByRating sink(input(\n\t\tid as integer,\n\t\tReviewCount as integer,\n\t\tPrice as string,\n\t\tCity as string,\n\t\tLocationWithPriceCount as integer,\n\t\tState as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Price','SearchLocationCity','SearchLocationState'],\n\tmapColumn(\n\t\tReviewCount,\n\t\tPrice,\n\t\tCity = SearchLocationCity,\n\t\tLocationWithPriceCount,\n\t\tState = SearchLocationState\n\t)) ~> SinkToSQL"
						}
					],
					"transformations": [
						{
							"name": "FilterByReviewCount",
							"script": "RawYelpData filter(greaterOrEqual(ReviewCount,100)) ~> FilterByReviewCount"
						},
						{
							"name": "AggregateReviewCountByRating",
							"script": "FilterByReviewCount aggregate(groupBy(Price,\n\t\tSearchLocationCity,\n\t\tSearchLocationState),\n\tLocationWithPriceCount = count(Id),\n\t\tReviewCount = sum(ReviewCount)) ~> AggregateReviewCountByRating"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Raw_Yelp_Data_DF')]",
				"[concat(variables('factoryId'), '/datasets/Raw_Yelp_Data_DF_Aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy S3 Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "S3 Object Exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Amazon_S3_Object",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:00:15",
							"sleep": 10
						}
					},
					{
						"name": "Copy S3 Object",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "S3 Object Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "FileSystemSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Amazon_S3_Object",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Local_File_Share",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "S3 Does Not Exist",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "S3 Object Exists",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-34.eastus.logic.azure.com:443/workflows/cc1c41cefcda4773b17ef1565b6366d3/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OpgAMjs3ObbrlTBIIScvQQY2Lk2onl2nzNnGntTgLGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"error\": \"unable to access S3 object\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"folder": {
					"name": "Activities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Local_File_Share')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Yelp Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Yelp Data 1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "HttpSource",
								"httpRequestTimeout": "00:01:40"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"id": "YelpId",
									"name": "Name",
									"review_count": "ReviewCount",
									"rating": "Rating",
									"categories": "Category",
									"city": "SearchLocationCity",
									"state": "SearchLocationState",
									"price": "Price"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Get_Yelp_Data_1",
								"type": "DatasetReference",
								"parameters": {
									"Category": {
										"value": "@pipeline().parameters.Category1",
										"type": "Expression"
									},
									"City": {
										"value": "@pipeline().parameters.City1",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Raw_Yelp_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Yelp Data 2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "HttpSource",
								"httpRequestTimeout": "00:01:40"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"id": "YelpId",
									"name": "Name",
									"review_count": "ReviewCount",
									"rating": "Rating",
									"categories": "Category",
									"city": "SearchLocationCity",
									"state": "SearchLocationState",
									"price": "Price"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Get_Yelp_Data_1",
								"type": "DatasetReference",
								"parameters": {
									"Category": {
										"value": "@pipeline().parameters.Category2",
										"type": "Expression"
									},
									"City": {
										"value": "@pipeline().parameters.City2",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Raw_Yelp_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Aggregate Yelp Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Yelp Data 2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Yelp Data 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Aggregate Yelp Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawYelpData": {},
									"SinkToSQL": {}
								}
							},
							"staging": {},
							"compute": {
								"computeType": "General",
								"coreCount": 8
							}
						}
					},
					{
						"name": "Handle Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy Yelp Data 2",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy Yelp Data 1",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Aggregate Yelp Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-34.eastus.logic.azure.com:443/workflows/cc1c41cefcda4773b17ef1565b6366d3/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OpgAMjs3ObbrlTBIIScvQQY2Lk2onl2nzNnGntTgLGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"error": "Unable to copy yelp data"
							}
						}
					}
				],
				"parameters": {
					"Category1": {
						"type": "string"
					},
					"Category2": {
						"type": "string"
					},
					"City1": {
						"type": "string"
					},
					"City2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Activities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Get_Yelp_Data_1')]",
				"[concat(variables('factoryId'), '/datasets/Raw_Yelp_Data')]",
				"[concat(variables('factoryId'), '/dataflows/Aggregate Yelp Data')]"
			]
		}
	]
}